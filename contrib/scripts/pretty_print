#!/usr/bin/env bash
#
# Copyright (C) 2014, Fairview 5 Engineering, LLC
# George Joseph <george.joseph@fairview5.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.
#

if [ -t 0 ] ; then
	echo "pretty_print is a filter and needs the output of runtests.py piped to it."
	echo "Try ./runtests.py <options> | $0"
	exit 1
fi

declare -ix test_timeout=0
YELLOW='\033[01;33m'
GREEN='\033[01;32m'
RED='\033[01;31m'
NORM='\033[m'

col=$(( $(tput cols) - 36 ))

counter() {
	s=1
	status=Running
	while(true) ; do
		sleep 1
		if [ $test_timeout -gt 0 -a $s -gt $(( ($test_timeout / 4) * 3 )) ] ; then
			printf "${YELLOW}[%12s %3ss ]${NORM}" "Hung in" $(( $test_timeout - s ))
		else
			printf "[%12s %3ss ]" "Running for" $s
		fi
		(( s++ ))
		tput cub 20
	done
}

echo -e -n "Calculating...\r"

trap 'kill $countpid &>/dev/null' INT ERR
while read line ; do
	if [[ $line =~ ^Running.tests.for.(Asterisk.*) ]] ; then
		declare -ix runnable=0
		declare -ix total=0
		declare -ix passed=0
		declare -ix failed=0
		declare -ix timedout=0
		declare -ix tests=0
		declare -ix maxelapsed=0
		declare -a failures
		declare -a timeouts

		version=${BASH_REMATCH[1]}
		starttime=$SECONDS
	fi

	if [[ $line =~ ^Tests.to.run:.([0-9]+),[\ ]+Maximum.test.inactivity.time:.([0-9-]+) ]] ; then
		runnable=${BASH_REMATCH[1]}
		export test_timeout=${BASH_REMATCH[2]}
		echo =============================================================
		echo ${line/-1/unlimited}
		printf "[%-*.*s ][%-11s][%s][${GREEN}%4s${NORM}][${RED}%4s${NORM}]\n" $col $col "Test" "   Test" "Status" "Pass" "Fail"
	fi

	if [[ $line =~ ^--\>.Running.test.\'(.+)\'.\.\.\. ]] ; then
		(( tests++ ))
		printf "[%-*.*s ][%4d of %3d]" $col $col ${BASH_REMATCH[1]#*/} $tests $runnable
		st=$SECONDS
		counter &
		disown $!
		countpid=$!
	fi

	if [[ $line =~ ^Test.*tests/([^\']+)\',.*(passed|failed|timedout)$ ]] ; then
		test=${BASH_REMATCH[1]}
		status=${BASH_REMATCH[2]}
		col=$(( $(tput cols) - 36 ))
		et=$(( $SECONDS - $st ))

		if [[ $status = passed ]] ; then
			(( passed++ ))
			COLOR=${GREEN}
			label=Passed
			[[ $et -gt $maxelapsed ]] && maxelapsed=$et
		fi
		if [[ $status = failed ]] ; then
			(( failed++ ))
			COLOR=${RED}
			label=Failed
			failures+=("FAILED: $test")
			[[ $et -gt $maxelapsed ]] && maxelapsed=$et
		fi
		if [[ $status = timedout ]] ; then
			(( failed++ ))
			(( timedout++ ))
			COLOR=${RED}
			label=Hung!!
			timeouts+=("TIMEDOUT: $test")
		fi
		kill $countpid
		printf "[${COLOR}%s${NORM}][${GREEN}%4d${NORM}][${RED}%4d${NORM}]\n" $label $passed $failed
	fi

	if [[ $line =~ TEST\ RESULTS ]] ; then
		for fail in "${failures[@]}" ; do
			echo -e "${RED}$fail${NORM}"
		done
		for to in "${timeouts[@]}" ; do
			echo -e "${YELLOW}$to${NORM}"
		done

		elapsed=$(( $SECONDS - $starttime ))
		time="$(( $elapsed / 60 ))m $(( $elapsed % 60 ))s"
		echo -e "Tests: $runnable   ${GREEN}Passed: $passed   ${RED}Failed: $failed   TimedOut: $timedout${NORM}   Time: $time\tLongest test: ${maxelapsed}s"
	fi
done

trap - INT ERR

kill $countpid &>/dev/null




