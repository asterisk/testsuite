#!/usr/bin/env python

"""A test that runs GET, PUT, POST and DELETE requests over the websocket

Copyright (C) 2025, Sangoma Technologies Corporation
George Joseph <gjoseph@sangoma.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
"""

import sys
import logging
import json
import os

from twisted.internet import reactor

sys.path.append("lib/python")

from asterisk.test_case import TestCase
from asterisk.ari import AriClientFactory

LOGGER = logging.getLogger(__name__)

USERPASS = ('testsuite', 'testsuite')

class RESToverWebsocketTest(TestCase):
    """A class that manages this test"""

    def __init__(self):
        """Constructor"""
        super(RESToverWebsocketTest, self).__init__()
        self.create_asterisk(count=1)
        self.protocol = None
        self.session_id = None
        self.responses_received = 0
        self.requests_sent = 0
        self.reactor_timeout = 10
        if self.test_config.config and 'test-object-config' in self.test_config.config:
            self.reactor_timeout = self.test_config.config['test-object-config'].get('reactor-timeout', 10)

        self.factory = AriClientFactory(receiver=self,
                                        host=self.ast[0].host,
                                        port=8088,
                                        apps='testsuite',
                                        userpass=USERPASS,
                                        timeout_secs=10)
        self.factory.connect()

    def run(self):
        """Entry point for the twisted reactor"""
        super(RESToverWebsocketTest, self).run()
        reactor.run()

    def on_reactor_timeout(self):
        self.passed = False
        self.protocol.sendClose()

    def on_ws_event(self, message):
        """Handler for WebSocket events

        Keyword Arguments:
        message  -- The WS event payload
        """
        msg_type = message.get('type')
        LOGGER.info("Received event reponse: %s" % message)
        callback = getattr(self, 'handle_%s' % msg_type.lower(), None)
        if callback:
            callback(message)

    def on_ws_closed(self, protocol):
        """Handler for WebSocket Client Protocol closed

        :param protocol The WS Client protocol object
        """
        LOGGER.info("WebSocket connection closed: %s" % protocol)
        self.stop_reactor()

    def on_ws_open(self, protocol):
        """Handler for WebSocket Client Protocol opened

        Keyword Arguments:
        protocol -- The WS Client protocol object
        """
        LOGGER.info("WebSocket connection made: %s" % protocol)
        self.protocol = protocol

        self.protocol.sendRequest(
            "GET", "asterisk/info",
            request_id="get-info")
        self.requests_sent += 1

    def handle_restresponse(self, message):
        """RESTResponseMsg handler

        Keyword Arguments:
        message -- the JSON message
        """
        response = message
        state = response['request_id']
        rc = response['status_code']

        # "state" is the last successful state.  The case statements
        # say what to do next.
        match state:
            case "get-info":
                if rc != 200:
                    LOGGER.error("Invalid response code '%d' for state '%s'" % (rc, state))
                    self.passed = False
                    self.protocol.sendClose()
                    return
                self.responses_received += 1
                # Launch a bunch of requests in parallel.
                # Asterisk still processes them sequentially.
                self.protocol.sendRequest(
                    "GET", "asterisk/ino",
                    request_id="get-fail")
                self.requests_sent += 1
                self.protocol.sendRequest(
                    "PUT", "asterisk/modules/chan_pjsip.so",
                    request_id="reload-fail")
                self.requests_sent += 1
                self.protocol.sendRequest(
                    "PUT", "asterisk/modules/res_pjsip.so",
                    request_id="reload-success")
                self.requests_sent += 1
            case "get-fail":
                if rc != 404:
                    LOGGER.error("Invalid response code '%d' for state '%s'" % (rc, state))
                    self.passed = False
                    self.protocol.sendClose()
                    return
                self.responses_received += 1
            case "reload-fail":
                if rc != 409:
                    LOGGER.error("Invalid response code '%d' for state '%s'" % (rc, state))
                    self.passed = False
                    self.protocol.sendClose()
                    return
                self.responses_received += 1
            case "reload-success":
                if rc != 204:
                    LOGGER.error("Invalid response code '%d' for state '%s'" % (rc, state))
                    self.passed = False
                    self.protocol.sendClose()
                    return
                self.responses_received += 1
            case _:
                LOGGER.error("Unknown state: %s" % state)
                self.passed = False
                self.protocol.sendClose()

        if self.responses_received == self.requests_sent:
            self.passed = True
            self.protocol.sendClose()

def main():
    """Main entry point for the test.

    Returns:
    0 on test pass
    1 on test failure
    """

    test = RESToverWebsocketTest()
    test.run()

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
