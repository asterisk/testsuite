#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2015, Digium, Inc.
Matthew Nicholson <mnicholson@digium.com>
Jonathan Rose <jrose@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging
import os
import shutil

sys.path.append("lib/python")

from twisted.internet import reactor
from asterisk.test_case import TestCase

LOGGER = logging.getLogger(__name__)


class T38Test(TestCase):
    """Test class for performing the test. Manages files, originates FAX call,
    and monitors a user event to verify that the fax completed successfully on
    the sender end of the call.
    """

    def __init__(self):
        """Create Asterisk instances and prepare files.
        """

        super(T38Test, self).__init__()
        self.reactor_timeout = 120
        self.create_asterisk(2)

        # copy the tiff file we are going to send to a good known location
        shutil.copy("%s/send.tiff" % (os.path.dirname(
                    os.path.realpath(__file__)),), "%s%s" %
                    (self.ast[0].base, self.ast[0].directories['astdatadir']))

    def ami_connect(self, ami):
        """Post AMI Connection Operations - originate/registration

        Upon connecting to AMI on the first Asterisk instance, originate
        a call that will send the fax to the second Asterisk instance. Also
        register for UserEvents.
        """

        if ami.id == 0:
            ami.registerEvent('UserEvent', self.fax_result)
            deferred = ami.originate("PJSIP/ast2-t38/sip:1234@127.0.0.2",
                                     "sendfax", "1234", 1)
            deferred.addErrback(self.handle_originate_failure)

    def fax_result(self, ami, event):
        """Verify FAX test results from user events
        """

        if event['userevent'] != 'FaxStatus':
            return

        if event['status'] == "SUCCESS":
            self.passed = True
        else:
            LOGGER.error("Error sending fax through t38:")
            LOGGER.error("Operation: %s" % (event['operation'],))
            LOGGER.error("Status: %s" % (event['status'],))
            LOGGER.error("Error: %s" % (event['error'],))
            LOGGER.error("StatusStr: %s" % (event['statusstr'],))

        self.stop_reactor()

    def run(self):
        super(T38Test, self).run()
        self.create_ami_factory(2)


def main():
    test = T38Test()
    reactor.run()

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

