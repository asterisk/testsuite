#!/usr/bin/env python
'''
Copyright (C) 2015, BoxTub SpA.
Rodrigo Ram√≠rez Norambuena <a@rodrigoramirez.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''
import sys
import logging
from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.test_case import TestCase
from asterisk.version import AsteriskVersion
from twisted.internet import reactor, defer
from starpy import manager

logger = logging.getLogger(__name__)

class QueueReasonPauseTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.create_asterisk()
        self.pause_reason = 'Break'
        self.passed = False


    def ami_connect(self, ami):
        message = {'Action': 'QueuePause', 'Interface': 'Local/agent@default',
                   'Paused': True, 'Reason': self.pause_reason}
        logger.info( "Pausing member with reason")
        ami.sendMessage(message, responseCallback = self.paused_finished)

    def paused_finished(self, received):
        message = {'action': 'QueueStatus'}
        self.ami[0].registerEvent("QueueMember", self.queue_member_event)
        self.ami[0].sendMessage(message)

        return 0

    def queue_member_event(self, ami, event):
        reason = event.get("pausedreason")
        if reason !=  self.pause_reason:
            logger.error("Received a QueueMember event with no reason setted.")
            self.passed = False
            self.stop_reactor()
            return

        self.passed = True

    # create and connect ami.
    def run(self):
        TestCase.run(self)
        self.create_ami_factory()

def main():

    test = QueueReasonPauseTest()
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if test.passed:
        return 0
    return 1


if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
