testinfo:
    summary: 'Ensure NOTIFY bodies for pidf+xml subscriptions are correct.'
    description: |
        'A SIPp instance subscribes to "bob" using pidf+xml. Upon the
        first TestEvent indicating that there is an active subscription, the
        state of "Custom:bob" is changed. Each AMI event indicating that a
        state change occurred triggers another state change until all states
        have been set. The SIPp scenario expects to receive a NOTIFY message
        for each state and simply responds to them.

        A test module is used to verify each NOTIFY body that it finds while
        listening for SIP packets. The module parses the body and verifies the
        tags, attributes, and text for each element using the specified
        configuration. If the body is not able to be parsed(IE. malformed XML)
        or any component of the body does not match what is expected, the test
        fails.'

properties:
    dependencies:
        - buildoption: 'TEST_FRAMEWORK'
        - sipp :
            version : 'v3.0'
        - python: 'twisted'
        - python: 'starpy'
        - python: 'scapy'
        - asterisk: 'res_pjsip'
        - asterisk: 'res_pjsip_exten_state'
        - asterisk: 'res_pjsip_pidf_body_generator'
        - custom: 'rawsocket'
    tags:
        - pjsip
        - refleaks

test-modules:
    add-relative-to-search-path: ['..']
    test-object:
        config-section: sipp-config
        typename: 'sipp.SIPpTestCase'
    modules:
        -
            config-section: test-config
            typename: 'presence.BodyCheck'
        -
            config-section: ami-config
            typename: 'pluggable_modules.EventActionModule'

sipp-config:
    reactor-timeout: 30
    fail-on-any: True
    stop-after-scenarios: False
    test-iterations:
        -
            scenarios:
                - { 'key-args': {'scenario': 'subscribe.xml', '-p': '5061'},
                    'ordered-args': ['-timeout_error'] }

test-config:
    # Expected number of NOTIFY messages with the expected body type.
    expected_notifies: '7'
    # Expected body type.
    expected_body_type: 'pidf'
    # Expected body.
    expected_body:
        # Expected namespaces for PIDF bodies.
        namespaces:
            default: 'urn:ietf:params:xml:ns:pidf'
            pp: 'urn:ietf:params:xml:ns:pidf:data-model'
            ep: 'urn:ietf:params:xml:ns:pidf:rpid'
        # All expected element tag names for PIDF bodies.
        tags:
            ['presence', 'note', 'tuple', 'status', 'basic', 'contact',
             'pp:person', 'ep:activities', 'ep:on-the-phone']
        # Regex patterns for element attributes for each body in order. Some
        # attribute values of elements differ for each body depending on the
        # body type and state changes. Therefore we list them in the order that
        # matches the state changes. For this test the attribute values should
        # be the same for all bodies.
        attributes:
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
            -
                presence:
                    entity: '^sip:bob@127.0.0.1(:5060)?$'
                tuple:
                    id: '^bob$'
                contact:
                    priority: '^1$'
        # Regex patterns for element text for each body in order. Some text
        # of elements differ for each body depending on the body type and state
        # changes. Therefore we list them in the order that matches the state
        # changes.
        text:
            -
                note: 'Ready'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'Ringing'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'On the phone'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'On hold'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'On the phone'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'Unavailable'
                basic: 'closed'
                contact: '^sip:alice@127.0.0.1(:5060)?$'
            -
                note: 'Ready'
                basic: 'open'
                contact: '^sip:alice@127.0.0.1(:5060)?$'

ami-config:
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'TestEvent'
                    State: 'SUBSCRIPTION_STATE_SET'
                    StateText: 'ACTIVE'
                    Endpoint: 'alice'
            count: '>1'
            trigger-on-count: True
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'RINGING'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'Ringing'
            count: '1'
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'INUSE'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'InUse'
            count: '1'
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'ONHOLD'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'Hold'
            count: '1'
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'BUSY'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'Busy'
            count: '1'
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'UNAVAILABLE'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'Unavailable'
            count: '1'
        ami-actions:
            action:
               action: 'SetVar'
               variable: 'DEVICE_STATE(Custom:bob)'
               value: 'NOT_INUSE'
    -
        ami-events:
            id: '0'
            conditions:
                match:
                    Event: 'ExtensionStatus'
                    Exten: 'bob'
                    Hint: 'Custom:bob'
                    StatusText: 'Idle'
            count: '1'
