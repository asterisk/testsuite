# This is a sample configuration that describes many of the available settings.
# Also see the following URL's:
# https://docs.asterisk.org/Test-Suite-Documentation/Test-Development/Test-Suite-Configuration/
# https://docs.asterisk.org/Test-Suite-Documentation/Test-Development/Pluggable-Component-Framework/

# The testinfo section contains information that describes the purpose of an
# individual test
testinfo:
    # If true, skip execution of this test
    skip : 'Brief reason for skipping test' # OPTIONAL

    # A summary of what the test does
    summary: 'Put a short one liner summary of the test here'

    # A detailed description of what functionality is covered by the test
    description: |
        'Put a more verbose description of the test here.  This may span
        multiple lines.'

    # A sequence of key/value pairs specifying issues in an issue tracker related to this test
    issues: # OPTIONAL
        # List of issue numbers associated with this test
        - jira : 'ASTERISK-12345'
        - jira : 'ASTERISK-10101'

# The properties section contains information about requirements and
# dependencies for this test.
properties:

    # A sequence of feature specifies that the version of Asterisk under test must support.
    features: # OPTIONAL
        # List features the Asterisk version under test must support for this test
        # to execute.  All features must be satisfied for the test to run.
        - 'digiumphones'
        - 'cert'

    # The Asterisk modules and third party applications/libraries necessary to run the test
    dependencies: # OPTIONAL
        # List dependencies that must be met for this test to run. Any of the
        # keywords listed in this block can occur multiple times.
        #
        - buildoption: 'TEST_FRAMEWORK' # OPTIONAL - Asterisk compilation flag

        # Checking for an 'app' dependency behaves like the 'which' command
        - app: 'bash'
        - app: 'sipp'

        # A 'python' dependency is a python module.  An attempt will be made to
        # import a module by this name to determine whether the dependency is
        # met.
        - python: 'twisted'
        - python: 'starpy'
        - python: 'yaml'

        # Specifies attributes of SIPp that must be present for this test to execute
        - sipp:
            version: 'v3.3'

        # Specifies attributes of OpenSSL that must be present for this test to execute
        - openssl:
            version: '1.0.1'

        # If present, import the yappcap library as a dependency for test execution
        - 'pcap'

        # A 'module' dependency is an Asterisk module that must be loaded by
        # Asterisk in order for this test to execute.  If the module is not loaded,
        # the test will not execute.
        - module: 'app_dial'

        # 'custom' dependency can be anything.  Checking for this dependency is
        # done by calling a corresponding method in the Dependency class in
        # runtests.py.  For example, if the dependency is 'ipv6', then the
        # depend_ipv6() method is called to determine if the dependency is met.
        - custom: 'ipv6'
        - custom: 'fax'

        # A 'remote' custom dependency specifies that this test does not run against
        # a local instance of Asterisk, but against some remote instance. This will
        # cause the Test Suite to not create new instances of Asterisk, modify the
        # Asterisk configuration, etc. Instead, it will look to its global configuration
        # settings for an 'asterisk-instances' section. This section defines the
        # remote Asterisk instances that this test will run against.
        - custom: 'remote'

    # A sequence of tags that categorize the test into groups of similar functionality
    tags: # OPTIONAL
        #
        # List of tags used to select a subset of tests to run.  A test must have all tags to run.
        #
        - core # This test is part of the core support level.
        - voicemail # This test involves voicemail functionality.

    # The expected result of the test. Setting this to False will cause the test
    # to pass if the test returns failure
    expectedResult: True # OPTIONAL

    # Settings that override the runtests script's test-config.yaml pre/post
    # condition test settings
    testconditions: # OPTIONAL

        # List of overrides for pre-test and post-test conditions.  If a condition is
        # defined for a test, the configuration of that condition in the test overrides
        # the setting defined in the global test configuration file.

        -
            # Check for thread usage in Asterisk.  Any threads present in Asterisk after test
            # execution - and any threads that were detected prior to test execution
            # that are no longer present - will be flagged as a test error.
            name: 'threads'

            # Disable execution of this condition.  This setting applies to any defined condition.
            # Any other value but 'False' will result in the condition being executed.
            enabled: 'False'

            # Execute the condition, but expect the condition to fail
            expectedResult: 'Fail'

            # The thread test condition allows for certain detected threads to be
            # ignored.  This is a list of the thread names, as reported by the CLI
            # command 'core show threads'
            ignoredThreads:
                - 'netconsole'
                - 'pbx_thread'

        -
            # Check for SIP dialog usage.  This looks for any SIP dialogs present
            # in the system before and after a run; if any are present and are not
            # scheduled for destruction, an error is raised.
            name: 'sip-dialogs'

            # In addition to checking for scheduled destruction, a test can request that
            # certain entries should appear in the SIP history.  If the entries do not
            # appear, an error is raised.
            sipHistoryRequirements:
                - 'NewChan'
                - 'Hangup'

        -
            # Check for held locks in Asterisk after test execution.  A lock is determined to
            # be in potential error if threads are detected holding mutexes and waiting on
            # other threads that are also holding mutexes.
            name: 'locks'

        -
            # Check for active channels in Asterisk.  If active channels are detected, flag
            # an error
            name: 'channels'
            #
            # The number of allowed active channels that can exist when the condition is checked.
            # If the number of channels detected is greater than this value, an error is raised.
            # By default, this value is 0.
            allowedchannels: 1

        -
            # Check for active file descriptors in Asterisk.  File descriptors detected before
            # test execution are tracked throughout the test; if any additional file descriptors
            # after test execution are detected, the test condition fails.
            name: 'file-descriptors'

# Modules to load for tests that use the Test Suite's pluggable framework. If
# using the Test Suite's pluggable framework, this block is required.
test-modules:

    # If defined and set to True, the test directory will be added to the
    # Python module loader path.
    add-test-to-search-path: True

    # Add an explicit path to the Python module loader path.
    add-to-search-path: '/usr/foo'

    # Add a path relative to the test directory to the Python module loader path.
    add-relative-to-search-path: '../../foo'

    # Defines the primary object that orchestrates test execution
    test-object:

        # The keyword in the test-config.yaml file that provides the configuration for the test object
        config-section: test-object-config

        # The fully qualified package.module.class to instantiate as the test object
        # A few that are available:
        # SimpleTestCase.SimpleTestCase, BridgeTestCase.BridgeTestCase, sipp.SIPpTestCase
        typename: 'SimpleTestCase.SimpleTestCase'

    # A sequence that defines optional pluggable modules to inject into the test object
    modules: # OPTIONAL
        -
            # The keyword in the test-config.yaml file that provides the configuration for the module
            config-section: 'ami-config'

            # The fully qualified package.module.class to instantiate as the module.
            # A few that are available:
            # ami.AMIEventModule, cdr.CDRModule
            typename: 'ami.AMIEventModule'

# The configuration for the test object. The configuration will differ depending
# on the test object used
test-object-config:
    # A path to a configuration directory other than this test's configuration
    # directory. The configuration files from this common directory will be
    # installed prior to this test's configuration files. This is useful for
    # large sets of tests that cover the same functionality, and allows them
    # to share config files.
    config-path: 'tests/foo'

    # A path to a base directory containing abritrary files to be copied
    # into the Asterisk well-known directories for Asterisk instances
    # in this test.
    # The directory should be relative to the testsuite top-level directory.
    # For example... If set to 'tests/mytests/myfiles' then files in
    # 'tests/mytest/myfiles/common/astvarlibdir/keys' would be copied to all
    # of this test's Asterisk instances's '/var/lib/asterisk/keys' directories.
    # Files in 'tests/mytest/myfiles/ast1/astvarlibdir/keys' would be copied
    # into the first Asterisk instance's '/var/lib/asterisk/keys' directory.
    # Files in 'tests/mytest/myfiles/ast2/astvarlibdir/keys' would be copied
    # into the second Asterisk instance's '/var/lib/asterisk/keys' directory.
    # etc.
    # This is useful for tests that can share files like keys and certificates.
    # NOTE: Files in individual '<testdir>/files' directories are automatically
    # copied so you don't need this parameter to share files among instances
    # in the same test.
    base-files-directory: 'tests/mytests/myfiles'

    reactor-timeout: 30
    spawn-after-hangup: True
    # Indicate that the test is going to be restarting Asterisk so
    # we will require the AMI connection to get reconnected after the
    # restart.  Old versions of starpy did not support reconnecting
    # the AMI session if the connection was broken.  This option
    # basically ensures that the test will fail with a meaningful
    # error message if that feature is not supported by starpy.
    allow-ami-reconnects: True
    # Whether a full log file containg DEBUG level should be created, defaults to True
    log-full: True
    # Whether a messages log file containing INFO level should be created, defaults to True
    log-messages: True
    test-iterations:
        -
            channel: 'Local/play@default'
            application: 'Echo'

# The configuration for a pluggable module. See other *-config.yaml.sample files
# for more details.
ami-config:
    -
        type: 'headermatch'
        id: '0'
        conditions:
            match:
                Event: 'Newexten'
                Channel: 'Local/play@default-00000000;2'
                Application: 'Verbose'
        requirements:
            match:
                AppData: 'AMI 1.4'
        count: '1'

