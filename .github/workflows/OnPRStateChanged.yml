#
# Workflows, like this one, that are triggered by PRs submitted
# from forked repositories are severly limited in what they can do
# for security reasons. For instance, they can't add or remove
# labels or comments even on the PR that triggered them.  Since
# we need to both of those things, GitHub recommends creating a
# separate workflow that does those tasks that's triggered when
# this PR workflow starts or finishes. Since that workflow isn't
# being run in the context of a forked repo, it has all the
# privileges needed to add and remove labels and comments.  The
# accompanying OnPRStateChangedPriv workflow does just that.

name: PRChanged
# WARNING!  The run name MUST start with "PR <pr_number>".
# The accompanying privleged workflow parses this to find
# the PR number.  It's the only reliable way it can get it.
run-name: "PR ${{ github.event.number }} ${{ github.event.action }} by ${{ github.actor }}"
on:
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: check-${{ github.event.number }}
  cancel-in-progress: true

jobs:
#
# Pull requests created from forked respositories don't have access
# to the "Action Variables" ('vars' context) so we need to retrieve
# control data from an action that's located in asterisk-ci-actions.
#
  Setup:
    runs-on: ubuntu-latest
    outputs:
      vars:  ${{ steps.setvars.outputs.control_data }}
    steps:
      - id: setvars
        uses: asterisk/asterisk-ci-actions/GetRepoControlData@main
        with:
          repo: ${{ github.event.repository.name }}

  Check:
    name: Check
    needs: Setup
    uses: asterisk/asterisk-ci-actions/.github/workflows/RunTestsuiteUnitTest.yml@main
    with:
      pr_number:         ${{ github.event.number }}
      base_branch:       ${{ github.event.pull_request.base.ref }}
      unittest_command:  ${{ fromJSON(needs.Setup.outputs.vars).UNITTEST_COMMAND }}
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}

